---
title: Who is Who?
author: RdR
date: 2019-07-15
comment: Adapted from a commonly posted logic puzzle

---

# Introduction

The students Lily, Jack and Daisy go to the same university. All of them come from a different country and have different hobbies. They all go to a university in the USA, where one of them is living. Lily has better grades then the one who comes from Italy. Jack has better grades then the one who likes reading books. The best grades has the one who likes football. Jack comes from Germany and Daisy likes cooking.

Who is who (name, country, hobby, grades)?

We can solve this problem in Prolog.  First, let's create *facts* about the various possible details in the problem.

%% facts "who is who -- logic puzzle" main
country(italy).
country(usa).
hobby(football).
hobby(reading).
grade(c:1).
grade(b:2).
grade(a:3).

%%

Next, we need to create a rule where the parameters are all the variables that we're interested in.  We can substitute facts for the variabels where the variables are already known.  In particular, we'll arbitrarily choose the variable P1 for Lily, P2 for Jack and P3 for Daisy.

%% rule "The rule that encodes the problem logic"  main
who(lily,C1,H1,Grade1, jack,germany,H2,Grade2, daisy,C3,cooking,Grade3):-
    country(C1), country(C3), C1 \= C3,
    hobby(H1), hobby(H2), H1 \= H2,
    grade(G1:Grade1), grade(G2:Grade2), grade(G3:Grade3),
    G1 \= G2, G2 \= G3, G1 \= G3,
    (C3=italy, G1@>G3),
    (H1=reading, G2@>G1),
    ((H1=football, G1@>G2, G1@>G3); (H2=football, G2@>G1, G2@>G3)).

%%

Now, to solve the puzzle, simply query the rule. We'll also create some formatting to put the result in a table.  Since our program uses Pandoc for post-processing the markdown text into pdf, we can use Pandoc's syntax for creating tables in markdown text.

%% query "The query that solves the puzzle" nonum
:-  who(P1,C1,H1,G1, P2,C2,H2,G2, P3,C3,H3,G3),

    Header = '| Person | Country | Hobby | Grade\n',
    ColumnForm = '|:------|:-------|:-----|------:|\n',
    RowForm = '%w | %w | %w | %w\n',
    atomic_list_concat([Header,ColumnForm,RowForm,RowForm,RowForm],Format),
    writef(Format,[P1,C1,H1,G1, P2,C2,H2,G2, P3,C3,H3,G3]).

%%

That's it.